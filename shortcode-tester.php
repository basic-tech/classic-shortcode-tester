<?php

/*
 * Description:   A Shortcode Tester
 * Documentation: http://shortcodetester.wordpress.com/
 * Author:        Magenta Cuda
 * License:       GPL2
 */

/*  Copyright 2013  Magenta Cuda

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License, version 2, as 
    published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

/*
    Project IX: Shortcode Tester
    
    The Shortcode Tester is a post editor tool for WordPress developers that displays in a popup window the HTML generated by WordPress shortcodes,
    i.e. so you can quickly view the generated HTML without having to view the entire post. It is actually just the diagnostic part of Project III:
    A Tiny Post Content Template Interpreter. However, since it is generally useful I have separated into its own plugin.
*/

# http://localhost/tablepress-test/?mc-sct=tpcti_html_eval_post_content

namespace mc_shortcode_tester {
        
    require_once( 'parse-functions.php' );

    define( 'START_OF_FOOTER', '<!-- ##### ACTION:get_footer -->' );

    $construct = function( ) {

        if ( !is_admin( ) ) {
            
            # a 'template_redirect' handles evaluation of HTML fragments from post content editor shortcode tester
            # using a 'template_redirect' insures we have the correct context for evaluating shortcodes
            
            add_action( 'template_redirect', function( ) {
                global $post;
                if ( empty( $_GET[ 'mc-sct' ] ) || $_GET[ 'mc-sct' ] !== 'tpcti_eval_post_content' ) {
                    return;
                }
                if ( !wp_verify_nonce( $_REQUEST[ 'nonce' ], 'sct_ix-shortcode_tester_nonce' ) ) {
                    wp_nonce_ays( '' );
                }
                setup_postdata( $post );
                # instead of showing the post we evaluate the sent content in the context of the post
                $html = do_shortcode( stripslashes( $_REQUEST[ 'post_content' ] ) );
                if ( !empty( $_REQUEST[ 'prettify' ] ) && $_REQUEST[ 'prettify' ] === 'true' ) {
                    #$html = str_replace( ' ', '#', $html );
                    #$html = str_replace( "\t", 'X', $html );
                    $html = preg_replace( '#>\s+<#', '><', $html );
                    #echo $html;
                    #die;
                    # DOMDocument doesn't understand some HTML5 tags, e.g. figure so
                    libxml_use_internal_errors( TRUE );
                    $dom = new \DOMDocument( );
                    $dom->preserveWhiteSpace = FALSE;
                    $dom->loadHTML( $html );
                    $dom->normalizeDocument( );
                    $dom->formatOutput = TRUE;
                    # saveHTML( ) doesn't format but saveXML( ) does. Why? see http://stackoverflow.com/questions/768215/php-pretty-print-html-not-tidy
                    $html = $dom->saveXML( $dom->documentElement );
                    # remove the <html> and <body> elements that were added by saveHTML( )
                    $html = preg_replace( [ '#^.*<body>\r?\n#s', '#</body>.*$#s' ], '', $html );
                    #$html = str_replace( ' ', '#', $html );
                    #$html = str_replace( "\t", 'X', $html );
                }
                echo $html;
                die;
            } );   # add_action( 'template_redirect', function( ) {

        } else {
       
            # things to do only on post.php and post-new.php admin pages

            $post_editor_actions = function( ) {

                add_action( 'media_buttons', function( ) {
                   $nonce = wp_create_nonce( 'sct_ix-shortcode_tester_nonce' );
?>
<button class="button" type="button" id="sct_ix-shortcode-tester" data-nonce="<?php echo $nonce; ?>">Shortcode Tester</button>
<?php
                } );

                add_action( 'admin_enqueue_scripts', function( $hook ) {
                    if ( $hook !== 'post.php' && $hook !== 'post-new.php' ) {
                        return;
                    }
                    wp_enqueue_style(  'mf2tk_macros_admin', plugins_url( 'css/mf2tk_macros_admin.css', __FILE__ ) );
                    wp_enqueue_script( 'mf2tk_macros_admin', plugins_url(  'js/mf2tk_macros_admin.js',  __FILE__ ), [ 'jquery' ] );
                    wp_localize_script( 'mf2tk_macros_admin', 'mf2tk_macros_admin', [
                        'shortcode_tester_nonce' => wp_create_nonce( 'sct_ix-shortcode_tester_nonce' )
                    ] );
                } );

                # $shortcode_tester() outputs the HTML generated by WordPress shortcodes for the "Shortcode Tester" popup

                $shortcode_tester = function( ) {
?>
<!-- start shortcode tester -->
<div id="sct_ix-popup_margin" style="display:none;"></div>
<div id="mf2tk-shortcode-tester" class="sct_ix-popup" style="display:none;">
    <div class="sct_ix-heading">
        <h3>Shortcode Tester</h3>
        <button id="button-mf2tk-shortcode-tester-close">X</button>
    </div>
    <div class="sct_ix-instructions">
        Enter HTML and WordPress shortcodes in the Source text area.<br />
        Click the Evaluate button to display the generated HTML from WordPress shortcode processing in the Result text area.
    </div>
    <div class="sct_ix-button_bar">
        <button id="mf2tk-shortcode-tester-evaluate" class="mf2tk-shortcode-tester-button">Evaluate</button>
        <button id="mf2tk-shortcode-tester-evaluate-and-prettify" class="mf2tk-shortcode-tester-button">Evaluate & Prettify</button>
        <button id="mf2tk-shortcode-tester-show-source" class="mf2tk-shortcode-tester-button">Show Source Only</button>
        <button id="mf2tk-shortcode-tester-show-result" class="mf2tk-shortcode-tester-button">Show Result Only</button>
        <button id="mf2tk-shortcode-tester-show-both" class="mf2tk-shortcode-tester-button">Show Both</button>
    </div>
    <div class="sct_ix-shortcode_tester_input_output">
        <div class="sct_ix-shortcode_tester_half">
            <div id="mf2tk-shortcode-tester-area-source" class="sct_ix-shortcode_tester_area">
                <h3>Source</h3>
                <textarea rows="12"></textarea>
            </div>
        </div>
        <div class="sct_ix-shortcode_tester_half">
            <div  id="mf2tk-shortcode-tester-area-result" class="sct_ix-shortcode_tester_area">
                <h3>Result</h3>
                <textarea rows="12" readonly></textarea>
            </div>
        </div>
    </div>
</div>
<!-- for the tooltip use the same classes as React uses for its tooltips -->
<div class="components-popover components-tooltip is-bottom is-center sct_ix-shortcode_tester_tooltip" style="display:none;">
    <div class="components-popover__content">Shortcode Tester</div>
</div>
<!-- end shortcode tester -->
<?php
                };   # $shortcode_tester = function( ) {

                # the "Insert Template" and "Shortcode Tester" are only injected on post.php and post-new.php admin pages
                add_action( 'admin_footer-post.php',     $shortcode_tester );
                add_action( 'admin_footer-post-new.php', $shortcode_tester );
                
            };   # $post_editor_actions = function( ) {
                
            add_action( 'load-post-new.php', $post_editor_actions );
            add_action( 'load-post.php',     $post_editor_actions );
            
        }   # if ( is_admin( ) ) {
            
    };   # $construct = function( ) {

    # $alt_template_redirect( ) will monitor template processing

    $hide_html_elements = function( $buffer, $start, $length ) {
        $elements = [ ];
        $n        = 0;
        error_log( 'hide_html_elements():$length=' . $length );
        error_log( 'hide_html_elements():substr( $buffer, $length - 16 ) = ' . substr( $buffer, $length - 16 ) );

        while ( ( $left_offset = \mc_html_parser\get_start_tag( $buffer, $start, $length ) ) !== FALSE ) {
            error_log( 'hide_html_elements():$start=' . $start );
            $right_offset = \mc_html_parser\get_name( $buffer, $left_offset + 1, $length );
            $name         = substr( $buffer, $left_offset + 1, $right_offset - $left_offset );
            error_log( 'hide_html_elements():$name=' . $name );
            if ( ! in_array( $name, [ 'img', 'br', 'hr', 'p' ] ) ) {
                # Tag <name> should have a matching end tag </name>.
                $gt_offset = \mc_html_parser\get_greater_than( $buffer, $right_offset + 1, $length );
                error_log( 'hide_html_elements():...>...=' . substr( $buffer, ( $gt_offset + 1 ) - 16, 64 ) );
                $offset    = \mc_html_parser\get_end_tag( $name, $buffer, $gt_offset + 1, $length );
                if ( $offset === FALSE ) {
                    # This should only happen on malformed HTML, i.e. no matching end tag </tag>.
                    error_log( 'ERROR:hide_html_elements():Cannot find matching end tag "</' . $name . '>".' );
                    error_log( 'ERROR:hide_html_elements():                   $gt_offset = ' . $gt_offset );
                    error_log( 'ERROR:hide_html_elements():     ( $length - $gt_offset ) = ' . ( $length - $gt_offset ) );
                    error_log( 'ERROR:hide_html_elements():substr( $buffer, $gt_offset ) = ' . substr( $buffer, $gt_offset ) );
                    break;
                }
                error_log( 'hide_html_elements():</tag>...=' . substr( $buffer, ( $offset + 1 ) - 16, 64 ) );
            }
            if ( ! in_array( $name, [ 'script', 'br', 'hr' ] ) ) {
                # Add element to list of elements to hide.
                $elements[ ] = (object) [ 'name' => $name, 'left' => $left_offset, 'right' => $gt_offset ];
            }
            $start = $offset + 1;
            if ( ++$n > 1024 ) {
                # This should not happen. If it does probably a programming error causing an infinite loop.
                error_log( 'ERROR:hide_html_elements():Probably in an infinite loop.' );
                error_log( 'ERROR:hide_html_elements():                   $start = ' . $start );
                error_log( 'ERROR:hide_html_elements():substr( $buffer, $start ) = ' . substr( $buffer, $start ) );
                break;
            }
        }
        # Hide elements in reverse order so previous offsets are preserved.
        foreach ( array_reverse( $elements ) as $element ) {
            error_log( 'hide_html_elements():$name=' . $element->name );
            error_log( 'hide_html_elements():tag=' . substr( $buffer, $element->left, $element->right - ( $element->left - 1 ) ) );
            if ( ( $style_offset = strpos( substr( $buffer, $element->left, $element->right - ( $element->left - 1 ) ), 'style=' ) ) === FALSE ) {
                $buffer = substr_replace( $buffer, ' style="display:none;"', $element->right, 0 );
            } else {
                # Element already has an inline style attribute.
                // TODO:
            }
        }
        error_log( 'hide_html_elements():return=' . "\n#####\n" . $buffer . "/n#####" );
        return $buffer;
    };
    $handle_output_buffering = function( $buffer ) use ( $hide_html_elements ) {
        error_log( 'handle_output_buffering():$buffer=' . "\n#####\n" . $buffer . "/n#####" );
        $buffer = $hide_html_elements( $buffer, 0, strpos( $buffer, START_OF_FOOTER ) );
        return $hide_html_elements( $buffer, strpos( $buffer, START_OF_FOOTER ) + strlen( START_OF_FOOTER ), strlen( $buffer ) );
    };
    $alt_template_redirect = function( ) use ( $handle_output_buffering ) {
        add_action( 'get_header', function ( $name ) {
            echo "<!-- ##### ACTION:get_header -->\n";
        } );
        add_action( 'wp_head', function( ) {
            echo "<!-- ##### ACTION:wp_head -->\n";
        } );
        add_action( 'the_post', function( &$post, &$query ) {
            echo "<!-- ##### ACTION:the_post -->\n";
        }, 10, 2 );
        add_action( 'loop_end', function( &$query ) {
            echo "<!-- ##### ACTION:loop_end -->\n";
        }, 10, 1 );
        add_action( 'wp_body_open', function( ) {
            echo "<!-- ##### ACTION:wp_body_open -->\n";
        } );
        add_filter( 'bloginfo', function( $output, $show ) {
            echo "<!-- ##### FILTER:blog_info:[[{$output}]] -->\n";
            return $output;
        }, 10, 2 );
        add_filter( 'has_nav_menu', function( $has_nav_menu, $location ) {
            return $has_nav_menu;
        }, 10, 2 );
        foreach ( [ 'header_image' ] as $name ) {
            add_filter( "theme_mod_{$name}", function( $default ) use ( $name ) {
                echo "<!-- ##### FILTER:theme_mod_{$name}:[[{$default}]] -->\n";
                return $default;
            } );
        }
        $output_buffering_on = FALSE;
        add_action( 'get_sidebar', function ( $name ) use ( &$output_buffering_on, $handle_output_buffering ) {
            echo "<!-- ##### ACTION:get_sidebar $name -->\n";
            if ( ! $output_buffering_on ) {
                ob_start( function( $buffer ) use ( &$output_buffering_on, $handle_output_buffering ) {
                    if ( $output_buffering_on ) {
                        $output_buffering_on = FALSE;
                        return $handle_output_buffering( $buffer );
                    }
                    return $buffer;
                } );
                $output_buffering_on = TRUE;
            }
        } );
        add_action( 'get_footer', function ( $name ) use ( &$output_buffering_on, $handle_output_buffering ) {
            echo START_OF_FOOTER . "\n";
            if ( ! $output_buffering_on ) {
                ob_start( function( $buffer ) use ( &$output_buffering_on, $handle_output_buffering ) {
                    if ( $output_buffering_on ) {
                        $output_buffering_on = FALSE;
                        return $handle_output_buffering( $buffer );
                    }
                    return $buffer;
                } );
                $output_buffering_on = TRUE;
            }
        } );
        add_action( 'wp_footer', function( ) {
            echo "<!-- ##### ACTION:wp_footer -->\n";
        } );
        register_shutdown_function( function( ) use ( &$output_buffering_on ) {
        } );
    };   # $alt_template_redirect = function() {

    $construct( );

    // TODO: run template processing monitor - experiment only remove!

    if ( ! empty( $_GET[ 'mc-sct' ] ) && $_GET[ 'mc-sct' ] === 'tpcti_html_eval_post_content' ) {
        add_action( 'template_redirect', function( ) use ( $alt_template_redirect ) {
            $alt_template_redirect( );
        } );
    }

}   # namespace mc_shortcode_tester {
?>
